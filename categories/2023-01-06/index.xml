<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2023-01-06 on TIL</title>
    <link>https://example.com/categories/2023-01-06/</link>
    <description>Recent content in 2023-01-06 on TIL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.com/categories/2023-01-06/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.com/docs/etc/003_huge_traffic_handling/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/etc/003_huge_traffic_handling/</guid>
      <description>우아콘 2023, 우아한 형제들 세션 정리 # 대규모 트랜잭션을 처리하는 배민 주문시스템 규모에 따른 진화 # 성장통들 # 개선 대상 리스트 단일 장애 포인트 대용량 데이터 대규모 트랜잭션 복잡한 이벤트 아키텍처 단일 장애 포인트 # 루비라 불리는 중앙 집중 저장소에 모든 시스템이 의존 중앙 저장소의 부하 발생 해결 # 중앙 저장소 -&amp;gt; 각 시스템을 분리하는 프로젝트 진행 시스템 간 통신은 Message Queue 기반으로 통신 특정 시스템의 장애는 메시지 발행의 실패로 끝 정리 # 중앙 집중 DB의 장애, 전체 시스템의 전파 -&amp;gt; MQ를 이용한 이벤트 기반 통신으로 시스템간 영향도를 분리</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/springbatch/001_springbatch_start/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/springbatch/001_springbatch_start/</guid>
      <description>강의메모 # 스프링 배치 소개 # 탄생 배경 # 자바 기반 표준 배치 기술 부재 스프링 배치는 SpringSource(현재는 Pivotal)와 Accenture(경영 컨설팅 기업)의 합작품 Accenture - 배치 아키텍처를 구현하면서 쌓은 기술적인 경험과 노하우 SpringSource - 깊이 있는 기술적 기반과 스프링의 프로그래밍 모델 배치 핵심 패턴 # Read(데이터 조회), Process(데이터 가공), Write(데이터 저장) 배치 시나리오 # 배치 프로세스를 주기적으로 커밋 동시 다발적인 Job 의 배치 처리, 대용량 병렬 처리 실패 후 수동 또는 스케줄링에 의한 재시작 의존관계가 있는 step 여러 개를 순차적으로 처리 조건적 Flow 구성을 통한 체계적이고 유연한 배치 모델 구성 반복, 재시도, Skip 처리 아키텍처 # 도서 - 스프링배치 완벽가이드 # 1장.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/system_design/001_system_expansion/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/system_design/001_system_expansion/</guid>
      <description>개발 책 읽기 : 가상 면접 사례로 배우는 대규모 시스템 설계 기초 1 # 1장. 사용자 수에 따른 규모 확장성 # 개요 # 1명의 사용자를 지원하는 시스템 -&amp;gt; 몇백만 사용자를 지원하는 시스템으로 설계 확장&#xA;단일 서버 # 웹, 앱, 데이터베이스, 캐시 등이 전부 서버 한 대에서 실행된다.&#xA;사용자는 도메인 이름(api.mysite.com)을 이용하여 웹사이트에 접속한다. 위 접속을 위해서는 도메인 이름을 도메인 이름 서비스(Domain Name Service, DNS)에 질의하여 IP 주소로 변환하는 과정이 필요하다.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/system_design/002_system_size_estimation/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/system_design/002_system_size_estimation/</guid>
      <description>개발 책 읽기 : 가상 면접 사례로 배우는 대규모 시스템 설계 기초 1 # 2장. 개략적인 규모 추정 # 개요 # 시스템 용량이나 성능 요구사항을 개략적으로 추정&#xA;개략적인 규모 추정(back-of-the-enveope estimation) : 보편적으로 통용되는 성능 수치상에서 사고 실험을 행하여 추정치를 계산하는 행위 어떤 설계가 요구사항에 부합할 것인지 보기 위한 것 효과적인 개략적 규모 추정을 위해서는 규모 확장성을 표현하는 데 필요한 기본기에 능숙해야 한다. 2의 제곱수 # 분산 시스템에서 다루는 데이터 양은 엄청나게 커질 수 있으나 그 계산법은 기본을 크게 벗어나지 않는다.</description>
    </item>
  </channel>
</rss>
